name: Week 5 CD - Simple Deployment

on:
  workflow_run:
    workflows: ["Week 5 CI/CD Pipeline"]
    types:
      - completed
    branches: [main]
  
  # Manual trigger for deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  check-ci-status:
    runs-on: ubuntu-latest
    outputs:
      deploy-ready: ${{ steps.check.outputs.ready }}
      image-tag: ${{ steps.check.outputs.tag }}
    
    steps:
    - name: Check CI workflow status
      id: check
      run: |
        if [ "${{ github.event_name }}" == "workflow_run" ]; then
          if [ "${{ github.event.workflow_run.conclusion }}" == "success" ]; then
            echo "ready=true" >> $GITHUB_OUTPUT
            echo "tag=sha-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "‚úÖ CI workflow completed successfully"
          else
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "‚ùå CI workflow failed, skipping deployment"
          fi
        else
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "tag=${{ github.event.inputs.image_tag || 'latest' }}" >> $GITHUB_OUTPUT
          echo "üîß Manual trigger - proceeding with deployment"
        fi

  deploy-staging:
    needs: check-ci-status
    if: needs.check-ci-status.outputs.deploy-ready == 'true'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update Kubernetes manifest for staging
      run: |
        IMAGE_TAG="${{ needs.check-ci-status.outputs.image-tag }}"
        NEW_IMAGE="ghcr.io/${{ github.repository_owner }}/course-tracker:${IMAGE_TAG}"
        
        echo "üîÑ Updating staging deployment with image: ${NEW_IMAGE}"
        
        # Update the deployment manifest
        if [ -f "week 5/k8s/deployment.yaml" ]; then
          sed -i "s|image: ghcr.io/.*/course-tracker:.*|image: ${NEW_IMAGE}|g" "week 5/k8s/deployment.yaml"
          echo "‚úÖ Updated deployment.yaml with new image tag"
        else
          echo "‚ùå deployment.yaml not found"
          exit 1
        fi

    - name: Validate manifest
      run: |
        # Install kubectl for validation
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Validate the manifest
        kubectl --dry-run=client apply -f "week 5/k8s/"
        echo "‚úÖ Kubernetes manifests validation passed"

    - name: Commit updated manifests
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet "week 5/k8s/deployment.yaml"; then
          echo "üìù No changes to commit"
        else
          git add "week 5/k8s/deployment.yaml"
          git commit -m "üöÄ Deploy course-tracker:${{ needs.check-ci-status.outputs.image-tag }} to staging"
          git push
          echo "‚úÖ Updated manifest committed and pushed"
        fi

    - name: Deployment Summary
      run: |
        echo "üéâ Staging Deployment Summary:"
        echo "  ‚Ä¢ Application: course-tracker"
        echo "  ‚Ä¢ Environment: staging"
        echo "  ‚Ä¢ Image: ghcr.io/${{ github.repository_owner }}/course-tracker:${{ needs.check-ci-status.outputs.image-tag }}"
        echo "  ‚Ä¢ Status: Ready for ArgoCD sync"
        echo ""
        echo "üìã Next Steps:"
        echo "  1. Setup ArgoCD in your cluster"
        echo "  2. Apply ArgoCD applications: kubectl apply -f 'week 5/argocd/'"
        echo "  3. ArgoCD will automatically sync the updated manifest"

  deploy-production:
    needs: [check-ci-status, deploy-staging]
    if: github.event.inputs.environment == 'production' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update Kubernetes manifest for production
      run: |
        IMAGE_TAG="${{ needs.check-ci-status.outputs.image-tag }}"
        NEW_IMAGE="ghcr.io/${{ github.repository_owner }}/course-tracker:${IMAGE_TAG}"
        
        echo "üîÑ Updating production deployment with image: ${NEW_IMAGE}"
        
        # For production, we might want a separate manifest or namespace
        if [ -f "week 5/k8s/deployment.yaml" ]; then
          # Create production-specific deployment if needed
          cp "week 5/k8s/deployment.yaml" "week 5/k8s/deployment-prod.yaml"
          
          # Update image and increase replicas for production
          sed -i "s|image: ghcr.io/.*/course-tracker:.*|image: ${NEW_IMAGE}|g" "week 5/k8s/deployment-prod.yaml"
          sed -i "s|replicas: 2|replicas: 3|g" "week 5/k8s/deployment-prod.yaml"
          sed -i "s|namespace: staging|namespace: production|g" "week 5/k8s/deployment-prod.yaml" || true
          
          echo "‚úÖ Updated production deployment manifest"
        else
          echo "‚ùå deployment.yaml not found"
          exit 1
        fi

    - name: Production Deployment Summary
      run: |
        echo "üéâ Production Deployment Summary:"
        echo "  ‚Ä¢ Application: course-tracker"
        echo "  ‚Ä¢ Environment: production"
        echo "  ‚Ä¢ Image: ghcr.io/${{ github.repository_owner }}/course-tracker:${{ needs.check-ci-status.outputs.image-tag }}"
        echo "  ‚Ä¢ Replicas: 3 (production scale)"
        echo "  ‚Ä¢ Status: Ready for manual ArgoCD sync"

  notification:
    needs: [deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Deployment Notification
      run: |
        STAGING_STATUS="${{ needs.deploy-staging.result }}"
        PRODUCTION_STATUS="${{ needs.deploy-production.result }}"
        
        echo "üìä Deployment Status Report:"
        echo "  ‚Ä¢ Staging: ${STAGING_STATUS:-skipped}"
        echo "  ‚Ä¢ Production: ${PRODUCTION_STATUS:-skipped}"
        echo ""
        
        if [ "$STAGING_STATUS" == "success" ]; then
          echo "‚úÖ Staging deployment completed successfully"
        elif [ "$STAGING_STATUS" == "failure" ]; then
          echo "‚ùå Staging deployment failed"
        fi
        
        if [ "$PRODUCTION_STATUS" == "success" ]; then
          echo "‚úÖ Production deployment completed successfully"
        elif [ "$PRODUCTION_STATUS" == "failure" ]; then
          echo "‚ùå Production deployment failed"
        fi
        
        echo ""
        echo "üîó ArgoCD Applications ready at: week 5/argocd/"